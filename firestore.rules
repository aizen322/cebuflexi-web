rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
        request.auth.token.role == role;
    }
    
    function isAdmin() {
      return hasRole('admin');
    }
    
    function isModerator() {
      return hasRole('moderator') || isAdmin();
    }
    
    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    function isValidPhone(phone) {
      return phone.matches('^(\\+63|0)?[0-9]{10}$');
    }
    
    function isValidDate(date) {
      return date is timestamp && 
        date >= timestamp.date(2024, 1, 1) && 
        date <= timestamp.date(2030, 12, 31);
    }
    
    function isValidPrice(price) {
      return price is number && price >= 0 && price <= 1000000;
    }
    
    function isValidGroupSize(size) {
      return size is number && size >= 1 && size <= 100;
    }
    
    // Users collection
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow read: if isModerator();
      
      // Validate user data
      allow create, update: if isOwner(userId) &&
        resource.data.keys().hasAll(['uid', 'email', 'displayName', 'createdAt']) &&
        isValidEmail(resource.data.email) &&
        resource.data.displayName is string &&
        resource.data.displayName.size() <= 100 &&
        resource.data.createdAt is timestamp;
    }
    
    // Bookings collection
    match /bookings/{bookingId} {
      allow read: if isOwner(resource.data.userId) || isModerator();
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.userId &&
        isValidBookingData(request.resource.data);
      allow update: if isOwner(resource.data.userId) || isModerator();
      allow delete: if isOwner(resource.data.userId) || isAdmin();
      
      function isValidBookingData(data) {
        return data.keys().hasAll([
          'userId', 'userEmail', 'userName', 'bookingType', 
          'startDate', 'endDate', 'totalPrice', 'status'
        ]) &&
        data.userId is string &&
        data.userId == request.auth.uid &&
        isValidEmail(data.userEmail) &&
        data.userName is string &&
        data.userName.size() <= 100 &&
        data.bookingType in ['tour', 'vehicle'] &&
        isValidDate(data.startDate) &&
        isValidDate(data.endDate) &&
        data.startDate <= data.endDate &&
        isValidPrice(data.totalPrice) &&
        data.status in ['pending', 'confirmed', 'cancelled', 'completed'] &&
        (data.groupSize == null || isValidGroupSize(data.groupSize)) &&
        (data.contactPhone == null || isValidPhone(data.contactPhone)) &&
        (data.specialRequests == null || 
          (data.specialRequests is string && data.specialRequests.size() <= 1000)) &&
        (data.guestName == null || 
          (data.guestName is string && data.guestName.size() <= 100)) &&
        (data.guestEmail == null || isValidEmail(data.guestEmail)) &&
        (data.guestPhone == null || isValidPhone(data.guestPhone));
      }
    }
    
    // Contact submissions collection
    match /contact_submissions/{submissionId} {
      allow read: if isModerator();
      allow create: if isValidContactSubmission(request.resource.data);
      
      function isValidContactSubmission(data) {
        return data.keys().hasAll(['name', 'email', 'subject', 'message', 'createdAt']) &&
        data.name is string &&
        data.name.size() >= 1 && data.name.size() <= 100 &&
        isValidEmail(data.email) &&
        data.subject is string &&
        data.subject.size() >= 1 && data.subject.size() <= 200 &&
        data.message is string &&
        data.message.size() >= 10 && data.message.size() <= 2000 &&
        data.createdAt is timestamp &&
        (data.phone == null || isValidPhone(data.phone));
      }
    }
    
    // Tours collection (admin only)
    match /tours/{tourId} {
      allow read: if true; // Public read access
      allow write: if isAdmin();
      
      // Validate tour data
      allow create, update: if isAdmin() &&
        request.resource.data.keys().hasAll([
          'id', 'title', 'category', 'description', 'price', 
          'duration', 'location', 'groupSize', 'images', 'available'
        ]) &&
        request.resource.data.title is string &&
        request.resource.data.title.size() <= 200 &&
        request.resource.data.category is string &&
        request.resource.data.category.size() <= 50 &&
        request.resource.data.description is string &&
        request.resource.data.description.size() <= 2000 &&
        isValidPrice(request.resource.data.price) &&
        request.resource.data.duration is number &&
        request.resource.data.duration >= 1 && request.resource.data.duration <= 30 &&
        request.resource.data.location is string &&
        request.resource.data.location.size() <= 100 &&
        request.resource.data.groupSize is map &&
        isValidGroupSize(request.resource.data.groupSize.min) &&
        isValidGroupSize(request.resource.data.groupSize.max) &&
        request.resource.data.groupSize.min <= request.resource.data.groupSize.max &&
        request.resource.data.images is list &&
        request.resource.data.images.size() >= 1 && request.resource.data.images.size() <= 10 &&
        request.resource.data.available is bool;
    }
    
    // Vehicles collection (admin only)
    match /vehicles/{vehicleId} {
      allow read: if true; // Public read access
      allow write: if isAdmin();
      
      // Validate vehicle data
      allow create, update: if isAdmin() &&
        request.resource.data.keys().hasAll([
          'id', 'name', 'type', 'pricePerDay', 'capacity', 
          'transmission', 'fuelType', 'available'
        ]) &&
        request.resource.data.name is string &&
        request.resource.data.name.size() <= 100 &&
        request.resource.data.type is string &&
        request.resource.data.type in ['Sedan', 'SUV', 'Van', 'Hatchback', 'Convertible'] &&
        isValidPrice(request.resource.data.pricePerDay) &&
        request.resource.data.capacity is number &&
        request.resource.data.capacity >= 1 && request.resource.data.capacity <= 15 &&
        request.resource.data.transmission in ['Manual', 'Automatic'] &&
        request.resource.data.fuelType in ['Gasoline', 'Diesel', 'Electric', 'Hybrid'] &&
        request.resource.data.available is bool;
    }
    
    // Admin logs collection (admin only)
    match /admin_logs/{logId} {
      allow read: if isModerator();
      allow write: if isModerator();
      
      // Validate log data
      allow create: if isModerator() &&
        request.resource.data.keys().hasAll(['userId', 'action', 'timestamp', 'details']) &&
        request.resource.data.userId is string &&
        request.resource.data.action is string &&
        request.resource.data.action.size() <= 100 &&
        request.resource.data.timestamp is timestamp &&
        (request.resource.data.details == null || 
          request.resource.data.details is string);
    }
    
    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.userId &&
        isValidReviewData(request.resource.data);
      allow update: if isOwner(resource.data.userId) || isModerator();
      allow delete: if isOwner(resource.data.userId) || isModerator();
      
      function isValidReviewData(data) {
        return data.keys().hasAll([
          'userId', 'userName', 'tourId', 'rating', 'comment', 'createdAt'
        ]) &&
        data.userId is string &&
        data.userId == request.auth.uid &&
        data.userName is string &&
        data.userName.size() <= 100 &&
        data.tourId is string &&
        data.rating is number &&
        data.rating >= 1 && data.rating <= 5 &&
        data.comment is string &&
        data.comment.size() >= 10 && data.comment.size() <= 1000 &&
        data.createdAt is timestamp;
      }
    }
    
    // User sessions collection (for analytics)
    match /user_sessions/{sessionId} {
      allow read: if isModerator();
      allow write: if isAuthenticated();
    }
    
    // System settings collection (admin only)
    match /settings/{settingId} {
      allow read: if isModerator();
      allow write: if isAdmin();
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
